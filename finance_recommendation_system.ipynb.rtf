 "cells": [\
  \{\
   "cell_type": "markdown",\
   "metadata": \{\},\
   "source": [\
    "### Finance Recommendation System - Adapted by [Your Name]\\n",\
    "\\n",\
    "This notebook is designed to create a recommendation system for financial products such as mutual funds, ETFs, or other investment options. It uses collaborative filtering techniques to suggest products based on user preferences."\
   ]\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Install required libraries\\n",\
    "!pip install numpy pandas scikit-learn"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Import necessary libraries\\n",\
    "import numpy as np\\n",\
    "import pandas as pd\\n",\
    "from sklearn.metrics.pairwise import cosine_similarity\\n",\
    "from sklearn.model_selection import train_test_split"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \},\
  \{\
   "cell_type": "markdown",\
   "metadata": \{\},\
   "source": [\
    "### Step 1: Load and Prepare the Data\\n",\
    "We will simulate a dataset representing financial products and user preferences. Each user rates different financial products based on their suitability or performance."\
   ]\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Simulate a dataset\\n",\
    "data = \{\\n",\
    "    'User': [1, 1, 2, 2, 3, 3, 4, 4],\\n",\
    "    'Product': ['Mutual Fund A', 'ETF B', 'Mutual Fund A', 'Bond C', 'ETF B', 'Stock D', 'Bond C', 'Stock D'],\\n",\
    "    'Rating': [5, 4, 4, 3, 5, 2, 3, 5]\\n",\
    "\}\\n",\
    "df = pd.DataFrame(data)\\n",\
    "print(df)"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \},\
  \{\
   "cell_type": "markdown",\
   "metadata": \{\},\
   "source": [\
    "### Step 2: Create a User-Product Matrix\\n",\
    "We will pivot the dataset to create a matrix where rows represent users and columns represent products."\
   ]\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Create a user-product matrix\\n",\
    "user_product_matrix = df.pivot(index='User', columns='Product', values='Rating').fillna(0)\\n",\
    "print(user_product_matrix)"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \},\
  \{\
   "cell_type": "markdown",\
   "metadata": \{\},\
   "source": [\
    "### Step 3: Compute Similarities\\n",\
    "We will calculate the cosine similarity between users based on their product ratings."\
   ]\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Compute user similarity\\n",\
    "user_similarity = cosine_similarity(user_product_matrix)\\n",\
    "print('User Similarity Matrix:\\n', user_similarity)"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \},\
  \{\
   "cell_type": "markdown",\
   "metadata": \{\},\
   "source": [\
    "### Step 4: Make Recommendations\\n",\
    "Based on the similarity scores, recommend products to users that they haven't rated yet."\
   ]\
  \},\
  \{\
   "cell_type": "code",\
   "metadata": \{\},\
   "source": [\
    "# Recommendation logic\\n",\
    "def recommend_products(user_index, user_similarity, user_product_matrix, top_n=2):\\n",\
    "    similar_users = user_similarity[user_index].argsort()[::-1][1:]  # Exclude self-similarity\\n",\
    "    recommendations = \{\}\\n",\
    "    for similar_user in similar_users:\\n",\
    "        for product, rating in user_product_matrix.iloc[similar_user].items():\\n",\
    "            if user_product_matrix.iloc[user_index][product] == 0:  # User hasn't rated\\n",\
    "                if product not in recommendations:\\n",\
    "                    recommendations[product] = 0\\n",\
    "                recommendations[product] += rating\\n",\
    "    sorted_recommendations = sorted(recommendations.items(), key=lambda x: x[1], reverse=True)\\n",\
    "    return [product for product, score in sorted_recommendations[:top_n]]\\n",\
    "\\n",\
    "# Example: Recommend for User 0\\n",\
    "recommended_products = recommend_products(0, user_similarity, user_product_matrix)\\n",\
    "print('Recommended Products:', recommended_products)"\
   ],\
   "execution_count": null,\
   "outputs": []\
  \}\
 ],\
 "metadata": \{\
  "kernelspec": \{\
   "display_name": "Python 3",\
   "language": "python",\
   "name": "python3"\
  \},\
  "language_info": \{\
   "codemirror_mode": \{\
    "name": "ipython",\
    "version": 3\
   \},\
   "file_extension": ".py",\
   "mimetype": "text/x-python",\
   "name": "python",\
   "nbconvert_exporter": "python",\
   "pygments_lexer": "ipython3",\
   "version": "3.9.7"\
  \}\
 \},\
 "nbformat": 4,\
 "nbformat_minor": 2\
\}\
}
